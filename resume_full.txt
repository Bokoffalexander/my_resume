Боков Александр Викторович
Мужчина, 32 года, родился 18 ноября 1991

+7 (995) 7564687 — предпочитаемый способ связи  •  WhatsApp, Telegram @BokoffAV
bokoffalexander@gmail.com

Проживает: Ростов-на-Дону
Гражданство: Россия, есть разрешение на работу: Россия
Не готов к переезду, готов к командировкам
Желаемая должность и зарплата
QA java начинающий специалист
Специализации:  
—  Другое

Занятость: полная занятость
График работы: полный день

Желательное время в пути до работы: не имеет значения
Опыт работы —9 лет 10 месяцев
Январь 2020 — настоящее время
4 года 6 месяцев



Средняя школа
Ростов-на-Дону
Учитель математики и физики
Преподавание математики и физики 5-11 классам. Подготовка к ВПР, ОГЭ, ЕГЭ
Сентябрь 2014 — Декабрь 2019
5 лет 4 месяца



Профи (profi.ru)
Ростов-на-Дону, profi.ru
Информационные технологии, системная интеграция, интернет
• Интернет-компания (поисковики, платежные системы, соц.сети, информационно-познавательные и развлекательные ресурсы, продвижение сайтов и прочее)
Репетитор по математике
Занятия по математике по подготовке учеников к школе, домашних заданий, переводные экзамены, ВПР, ОГЭ, ЕГЭ.
Занятия как лично, так и дистанционно.
Классы 5-11.
Образование
Магистр
2015
Московский физико-технический институт (Государственный университет), Москва
ФФКЭ, Нанометрология, стандартизация
Ключевые навыки
Знание языков
Русский — Родной
Английский — B2 — Средне-продвинутый

Навыки
Математическая статистика  Язык R 
Английский язык  SQL  MySQL  PostgreSQL  
Linux  Командная строка  Python  C  HTML 
CSS  PHP  Docker  Django  Nginx  Go  
PyQt  Pandas  postman  curl  
Тестирование  API  DevTools

Дополнительная информация
Обо мне
##################################
1. ТЕСТИРОВАНИЕ
##################################
##################################
1.1 Java Юнит-тесты
##################################

https://github.com/Bokoffalexander/java_maven_junit
(образец сборки java проекта
Maven + junit (4 теста запускаются))

https://github.com/Bokoffalexander/java_maven_junit_PARAMETERIZED
(Maven + junit (Параметризованный тест))
##################################
1.2. Go ТЕСТИРОВКА: (api-json, http, curl, postman)
##################################
Код на ГитХаб:
https://github.com/Bokoffalexander/go_web-service-gin/
________________________________
Есть API , написанное на Go.
Залил на мой vps сервер. 

Оттошлем http запросы на сервер:
Через curl и postman
________________________________
http://3vb.ru:7777/albums
________________________________
Это get-запрос
Отправим http запрос на сервер.
Проверим в терминале:
curl http://3vb.ru:7777/albums
Статус-ответ сервера: 200 (успешно)

Тоже самое проделаем в postman:
Отправим новый http запрос, метод get:
Высветит наши данные в теле(body) ответа json 
и статус-ответ сервера 200
________________________________
Это get-запрос для id=3
http://3vb.ru:7777/albums/3
Высветит только 3-ый альбом
(тело http ответа с сервера)
________________________________
Это post-запрос.
http://3vb.ru:7777/albums
Отправим http запрос на сервер.
Проверим в терминале:
curl http://3vb.ru:7777/albums     --header "Content-Type: application/json"     --request "POST" --data '{"id": "5","title": "Sashas voice","artist": "Sasha","price": 999.99}'
Статус-ответ сервера: 201 (created!)

Тоже самое проделаем в postman:
Новый http запрос, post, пропишем отсылаемые данные, внося в строки или сразу в json. 
Высветит наши добавленные данные в теле ответа в json 
Статус-ответ сервера 201 (Создано!)
##################################
1.3. Go ТЕСТИРОВКА: c параметрами запроса
##################################
Посмотреть код:
https://github.com/Bokoffalexander/go_humble_server
________________________________
Простой веб сервер на Go 

Описание: Небольшой веб-сервер. Получает из строки запроса значение переменной name и age, а затем выводит эти значения в окно браузера.

Скомпилировал написанный файл: go build server.go
Запустил в фоновом режиме: ./server &

Перейдите по сслыкам ниже и изменяйте значение переменной
Отправим http запросы с методом get:

// запрос в строке: http://3vb.ru:6006/?name=Sasha&age=31 
// ответ в браузере: My name is Sasha. Age is 31.

// запрос с строке: http://3vb.ru:6006/city/?city=Rostov-on-Don 
// ответ в браузере: My city is Rostov-on-Don.

##################################
1.4. Go ТЕСТИРОВКА: sql запрос к базе данных через http-запрос
________________________________
Посмотреть код на GitHub:
https://github.com/Bokoffalexander/go_server_connect_postgres/

Веб-сервер получает SQL запрос через URL. 
Конектимся к базе данных postgres, используя lib/pq.
Находим в БД данный select. 
Возвращаем в окно браузера ответ сервера. 

Попробовать как работает на моём сервере:
http://3vb.ru:7007/sql?book_id=1
Меняете значение book_id  и видите результат. 
##################################
1.5 Python ТЕСТИРОВКА API:
##################################
Пример простого проекта: 
Django python Rest API

Посмотреть код можно здесь
https://github.com/Bokoffalexander/rest_simple_Django_Rest_Framework/

Сделал API: которая выводит данные в формате JSON.
Можно получить или отправить данные через API.

Запустить: . /run.sh
или
Запустить код:
source venv/bin/activate && 
python manage.py runserver 77.232.139.236:4004 &

Проверить на моем сервере
http://77.232.139.236:4004/       //это получить
http://77.232.139.236:4004/add/   //это добавить

##################################
##################################
##################################
2. РАЗРАБОТКА на Java и Go
##################################
##################################
2.1 Java рекурсия
__________________________________
https://github.com/Bokoffalexander/java_Fibonachi
(Разными способами числа Чибоначи:.рекурсия, цикл, кэш)
##################################
2.2 Java ООП
__________________________________
https://github.com/Bokoffalexander/OOP_Animal
(там Java ООП)

Описание:
1)Inheritance - показано наследование и переопределение (+инкапсуляция)

2)GuessGame -  вызываем в классе методы других обьектов (играем пока не отгадаем)

3)Морской бой - обьекты вызывают друг друга (пока не потопим корабль)

4)Абстрактный класс и интерфейсы - наследование от абстрактного класса и имплементация интерфейса
##################################
2.3 Go проект #1
__________________________________
Удаляем все тайм-коды с Ютюба из файла txt.

Посмотреть код на гитхабе
https://github.com/Bokoffalexander/go_to_DELETE_ALL_TIMECODE
(Для запуска: /main text.txt)
##################################
2.4 Go проект #2
__________________________________
Печатает количество дублируемых строк, 
которые появились больше 1 раза.
__________________________________

Что в input:  
Считывает стандартный ввод Stdin или
считыввает из файлов (в аргумент передаем имя файла.txt).
Пример: ./duplication file.txt 

Посмотреть код на гитхабе:
https://github.com/Bokoffalexander/go_duplication_lines
##################################
##################################
2.5 Python проект. 
http://3vb.ru:5005/ 

Код проекта на гитхабе:
https://github.com/Bokoffalexander/django_girls_postgres_nginx_docker

Написал проект на python, используя Django фреймворк, postgres, nginx, gunicorn, docker, git.
Можно зарегистрироваться на моем сайте 
http://3vb.ru:5005/ 
и добавлять свои топики, а потом по каждой теме сделать несколько записей.
Каждый пользователь видит только свои темы и записи к ним.
Незарегистрированный пользователь не увидит никаких тем и записей.

Разрабатывал на локальной машине с виртуальным окружением на python.(urls.py, views.py, models.py, forms.py и шаблон base.html, чтобы не повторять код) 
Можно добавлять данные через /admin/ , а можно через ORM.

Залил свой проект на хост-сервер через ssh

Перевел с sqlite на postgres, и подключил gunicorn и nginx -прокси сервер (nginx.conf)- все это в контейнер.
Несколько контейнеров через docker-compose. 
Деплой проекта (делал без переменных .env, а виртуальное окружение venv удалил) на хостинге 3vb.ru:5005 (user2 пароль: 2)
##################################
##################################
3. КЛИЕНТ-СЕРВЕРНАЯ АРХИТЕКТУРА

Houston-сайт HTML-CSS
Go реализации HTTP-клиента и сервера

Код:
https://github.com/Bokoffalexander/bokoffalexander

Запущенный сайт на моем сервере:
http://3vb.ru:4753/

Запущенный сайт.
Деплой на ГитХаб page:
https://bokoffalexander.github.io/bokoffalexander/
##################################
4. Сайт-маршрутизатор
(HTML,CSS,JavaScript)

Код:
https://github.com/Bokoffalexander/different_sites/

Сайт:
https://bokoffalexander.github.io/different_sites/
##################################
##################################
##################################

5. Подготовка удаленного хост-сервера:
__________________________________
Зашел через терминал на хост-сервер через:
ssh root@77.232.139.236

Создал нового пользователя:
adduser san
Повысил права этого пользователя: 
usermod -aG sudo san

Отредактировал конфигурационный файл SSH-сервера:
nano /etc/ssh/sshd_config
Поменял ssh-вход на сервер с порта 22 на порт 1991.
Запретил ssh-соединение через root.

Теперь вход на удаленный сервер:
ssh -p 1991 san@77.232.139.236
(запросит password)

##################################
##################################
6. БД
__________________________________
Устанавливал Mysql, PostgreSql на удаленные Linux сервера. 
Проектировал и создавал Базы Данных.

 id |                         title
----+--------------------------------------------------------
  1 | psql -h 3vb.ru -U user -d db_name
  2 | psql -h localhost -U postgres (для первого раза)
  3 | sudo systemctl stop postgresql &&
  4 | systemctl start postgresql &
  5 | CREATE DATABASE name_db;
  6 | DROP DATABASE name_db;
  7 | CREATE TABLE name_t
  8 | (
  9 | id BIGSERIAL PRIMARY KEY,
 10 | title VARCHAR(50) NOT NULL,
 11 | percent INT NOT NULL,
 12 | rate DECIMAL(8,2) NOT NULL,
 13 | date_of_birth DATE NOT NULL
 14 | );
 15 | DROP TABLE name_t;
 16 | INSERT INTO name_t VALUES
 17 | (
 18 | DEFAULT,
 19 | `Alex`,
 20 | 99,
 21 | 700.50,
 22 | `1991-11-18`
 23 | );
 24 | SELECT * FROM name_t;
 25 | UPDATE name_t SET title = `la` WHERE id=7;
 26 | DELETE FROM name_t WHERE id=8;
 27 | \d+ name_t; (describe table)
 28 | \l; (list of databases)
 29 | \dt; (list of tables)
 30 | \connect name_db;
 31 | \du; (list of all users)
 32 | SELECT usename FROM pg_user; (column all users)
 33 | SELECT datname FROM pg_database;
 34 | Зададим пароль для суперюзера postgres(безопасно):
 35 | ALTER ROLE postgres WITH LOGIN;
 36 | \password user_role (безопасный ввод)
 37 | Создадим нового пользователя (не безопасно):
 38 | CREATE USER <username> WITH PASSWORD <password>;
 39 | --PRIVILEGES--ACCESS DB
 40 | REVOKE CONNECT ON DATABASE nova FROM PUBLIC;
 41 | GRANT  CONNECT ON DATABASE nova  TO user;
 42 | GRANT ALL PRIVILEGES ON DATABASE <db> TO <user>;
 43 | --ACCESS SCHEMA
 44 | REVOKE ALL ON SCHEMA public FROM PUBLIC;
 45 | GRANT USAGE ON SCHEMA public TO user;
 46 | --ACCESS TABLES
 47 | REVOKE ALL ON ALL TABLES IN SCHEMA public FROM PUBLIC;
 48 | GRANT SELECT ON ALL TABLES IN SCHEMA public TO user;
 49 | GRANT INSERT, UPDATE, DELETE ...;
 50 | GRANT ALL ON ALL TABLES IN SCHEMA public TO admin;

Вход в postgresql.
Зададим пароль для суперюзера postgres.
Создадим базу данных и и подключимся к ней в psql.

Создадим таблицу book с constraints ограничениями:
CREATE TABLE book (book_id SERIAL PRIMARY KEY, title VARCHAR(50) NOT NULL, author VARCHAR(30) NOT NULL, price DECIMAL(8,2) NOT NULL, amount INTEGER NOT NULL);

Заполним таблицу 6-ю книгами:
INSERT INTO book VALUES (DEFAULT, 'Мастер и Маргарита', 'Булгаков М.А.', 670.99, 3);
INSERT INTO book VALUES (DEFAULT, 'Белая гвардия', 'Булгаков М.А.', 540.50, 5);
INSERT INTO book VALUES (DEFAULT, 'Идиот', 'Достоевский Ф.М.', 460.00, 10);
INSERT INTO book VALUES (DEFAULT, 'Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 3);
INSERT INTO book VALUES (DEFAULT, 'Игрок', 'Достоевский Ф.М.', 480.50, 10);
INSERT INTO book VALUES (DEFAULT, 'Стихотворения и поэмы', 'Есенин С.А.', 650.00, 15);

Пример запроса с агрегирующей функцией SUM
к таблице book:

SELECT author, SUM(price*amount) AS "Стоимость" 
FROM book 
WHERE title<>'Идиот' 
AND title<>'Белая гвардия' 
GROUP BY author 
HAVING SUM(price*amount) > 5000 
ORDER BY SUM(price*amount) 
DESC;

Результат запроса:
author--------------|Стоимость 
--------------------+-----------
Есенин С.А.--------|   9750.00
Достоевский Ф.М.-|   7202.03

По дефолту PostgreSQL сконфигурирован так, что связан только с "localhost".
Это можно проверить командой:
netstat -nlt // 127.0.0.1:5432

Сделаем базу данных доступной для подключения извне а)б)в):

а)В файле 
/etc/postgresql/12/main/postgresql.conf 
сменим директиву:
listen_addresses = 'localhost' на
listen_addresses = '*'
netstat -nlt // 0.0.0.0:5432 на всех сетевых интерфейсах сервера

б)В конфигурационном файле базы данных
/etc/postgresql/11/main/pg_hba.conf 
добавим строки аутентификации:
host user_database user 0.0.0.0/0 password // IPv4 network
host user_database user ::/0 password      // IPv6 network

в)Перезагрузим сервер postgresql

Готово:
PostgreSQL прослушивает все доступные сетевые интерфейсы и ждёт подключения от user.

Можно подключиться:
sudo psql -h 77.232.139.236 -U user -d user_database

##################################
Скрипт на питоне и подключиться к БД:
https://github.com/Bokoffalexander/python_remote_base/blob/main/base_remote.py
##################################

Пример запроса к таблице book:
https://github.com/Bokoffalexander/myfiles/blob/main/sql_query_bookDB.txt

##################################
Ниже создание базы данных.
Нормализация баз данных 1NF 2NF 3NF..
Атомарно и из одной таблицы сделали три.
https://github.com/Bokoffalexander/my_postgres_code/blob/main/1NF_code.txt

Создание БД с внешним ключом:
https://github.com/Bokoffalexander/Sql_github/
https://gitverse.ru/bokoffalexander/Sql_gitverse

CREATE DATABASE cats;

 CREATE TABLE shops(id BIGSERIAL PRIMARY KEY, shop VARCHAR(99) NOT NULL);

 CREATE TABLE cats(id BIGSERIAL PRIMARY KEY, cat VARCHAR(99) NOT NULL, id_shop INTEGER NOT NULL DEFAULT 0,

    FOREIGN KEY (id_shop) REFERENCES shops(id) ON DELETE SET DEFAULT);

Пример LEFT JOIN 2-х таблиц кошки и магазины:
SELECT cats.cat, shops.shop 
FROM cats LEFT JOIN shops 
ON cats.shop_id=shops.id;

Пример Джоина трех таблиц:
SELECT t1.col, t3.col 
FROM t1 JOIN t2 ON t1.primarykey = t2.foreignkey
JOIN t3 ON t2.primarykey = t3.foreignkey

В файле 1NF_code.txt:
Из трех таблиц сделаем одну, используя Джоин:
SELECT myposts.postname, tags.tagname FROM myposts FULL OUTER JOIN posts_to_tags ON posts_to_tags.post_id=myposts.id JOIN tags ON posts_to_tags.tag_id=tags.id;
##################################
##################################
7. Использование GITHUB

Сначала нужно сгенерировать ssh-ключи, а затем один из них (публичный) добавить
в настройки профиля GitHub, а не репозитория, чтобы управлять всеми репозиториями.

# Создание ssh-ключей
ssh-keygen -t ed25519 -C "bokoffalexander@gmail.com"
# Дальше будет несколько вопросов. На все вопросы нужно нажимать Enter.

# Запуск агента ssh, который следит за ключами
eval "$(ssh-agent -s)"

# Добавления нового ssh-ключа в агент
ssh-add ~/.ssh/id_ed25519

# Скопируем публичный ключ
cat /home/san/.ssh/id_ed25519.pub

Создаем новый пустой репозиторий Bokoffalexander/project

Git - через Терминал
Заходим в директорию проекта на локальном компьютере,
где у нас все файлы и вбиваем команды:
git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin git@github.com:Bokoffalexander/project.git # А не https://..
git push -u origin main

(не просит ввести user и password)
Если кто-то пушнул в репозиторий, то делаем 
git pull
##################################
##################################
8. Использование ORM в Django

python manage.py shell
Создадим новый топик для юзера с id=1.
>>> from django_girls_app.models import Topic
>>> from django.contrib.auth.models import User
>>> top = Topic(text="Here new topic", owner=User.objects.get(id=1))
>>>top.save()
>>>

Создадим новую запись для темы с id=2.
>>> from django_girls_app.models import Topic
>>> from django_girls_app.models import Entry
>>> entr = Entry(text="I You We", topic=Topic.objects.get(id=2))
>>> entr.save()
>>>
##################################
##################################
9. Сортировки

Писал на python сортировки: быстрая, слияние.
Ниже сортировка быстрая
https://replit.com/@AlieksandrBoko2/SnappyNotedEngineer#main.py
Ниже сортировка слиянием
https://replit.com/@AlieksandrBoko2/ImportantDistortedNonagon#main.py

Си - сортировки.
Ниже Сортировка слиянием
https://replit.com/@AlieksandrBoko2/ClosedBelovedDemand#main.c
##################################
10. Построение графиков:
Cи вызывает R-скрипт и строит график
https://replit.com/@AlieksandrBoko2/WordyLimpingDisks#main.c
##################################
11. PERL

a)Простой однострочник, выводящий даты выпуска фильмов с сайта.
Скачиваем из программы страницу сайта, (используя system).
Вызываем написанный однострочник com_reg.sh,
Парсим скачанный файл, используя регулярные выражения
https://github.com/Bokoffalexander/perl_film_rate_date
##################################
12. PANDAS
Проект python, pandas, разработанный в  ipython:
https://github.com/Bokoffalexander/pandas_python_excel
из большого эксель файла вытащим нужную информацию.

Создадим программу excel_pandas.py.
Обработаем tmp.xlsx файл (более 1100 строк), в питоне посредством библиотеки пандас.
Получим обьект Series.
Из него найдем какие города по населению более 3 млн чел.
Выводим на экран эти города и население.
##################################
13. Писал скрипты в bash Linux
https://github.com/Bokoffalexander/bash_scripts_my

https://github.com/Bokoffalexander/myfiles/blob/main/Terminal.txt
##################################


